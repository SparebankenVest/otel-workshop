name: release

on:
  workflow_call:
    inputs:
      IMAGE_NAME:
        type: string
        description: otel-dotnet-backend-api #Example "dokken.azurecr.io"
        default: 'otel-dotnet-backend-api'
        required: false
      REGISTRY:
        type: string
        description: Azure Container registry Used #<app-name> #Example "spv-super-api"
        default: 'dokken.azurecr.io'
        required: false
    secrets:
      DOKKEN_CLIENT_ID:
        description: 'Dokken username'
        required: true
      DOKKEN_CLIENT_SECRET:
        description: 'Dokken Password'
        required: true

jobs:
  # publish_contract:
  #   uses: sparebankenvest/github-actions-pipelines/.github/workflows/openapi_publish_contract.yaml@main
  #   with:
  #     is_release: true
  #   secrets: inherit

  tag_docker:
    runs-on: ubuntu-latest
    environment: Production ## Krever denne at de har et Github Environment som heter "Production"?
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Publish to Registry
        uses: azure/docker-login@v2
        with:
          login-server: dokken.azurecr.io
          username: ${{ secrets.DOKKEN_CLIENT_ID }}
          password: ${{ secrets.DOKKEN_CLIENT_SECRET }}
      - run: |
          echo "SHORTSHA=$(git rev-parse --short $GITHUB_SHA)" >> $GITHUB_ENV
          echo "TIMESTAMP=$(git show -s --format=%ct $GITHUB_SHA)" >> $GITHUB_ENV
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ inputs.REGISTRY }}/${{ inputs.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Pull
        run: docker pull ${{ inputs.REGISTRY }}/${{ inputs.IMAGE_NAME }}:${{env.SHORTSHA}}-${{env.TIMESTAMP}}

      - name: Tag
        run: docker tag ${{ inputs.REGISTRY }}/${{ inputs.IMAGE_NAME }}:${{env.SHORTSHA}}-${{env.TIMESTAMP}} ${{ inputs.REGISTRY }}/${{ inputs.IMAGE_NAME }}:${{steps.meta.outputs.version}}

      - name: Push
        run: docker push ${{ inputs.REGISTRY }}/${{ inputs.IMAGE_NAME }}:${{steps.meta.outputs.version}}

      - name: Output summary
        run: |
          echo '# Docker Metadata 🐳' >> $GITHUB_STEP_SUMMARY
          echo '## Tags' >> $GITHUB_STEP_SUMMARY
          echo '${{ steps.meta.outputs.tags }}' >> $GITHUB_STEP_SUMMARY